# -*- coding: utf-8 -*-
"""Optimzed CNN fashion Mnist dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ENaCpPZIjg3ET_AnSLEqD_E18fC9XUbf
"""

import tensorflow as tf
from tensorflow import keras
import pandas as pd
import numpy as np
# fashion mnist dataset is the dataset having black and white fashion outfits within an image

fashion_minst = keras.datasets.fashion_mnist

(train_images,train_labels),(test_images,test_labels) = fashion_minst.load_data()

# as it is a grayscalse data, it is only black and white
# we scale this value as either 1 or 0 for black and white
train_images = train_images/255.0
test_images = test_images/255.0

train_images = train_images.reshape(len(train_images),28,28,1)

test_images = test_images.reshape(len(test_images),28,28,1)

def build_model(hp):
    model = keras.Sequential([
        keras.layers.Conv2D(
        filters = hp.Int('conv_1_filter', min_value = 32, max_value = 128, step = 16), # we use hyperparameter to select optimal filter values
        kernel_size = hp.Choice('conv_1_kernel', values = [3,5]), # it finds which value finds the better performance
        activation = 'relu',
        input_shape = (28,28,1)
        ),

        keras.layers.Conv2D(
        filters = hp.Int('conv_2_filter', min_value = 32, max_value = 64, step = 16),
        kernel_size = hp.Choice('conv_2_kernel', values = [3,5]), # it uses either 3 or5 filters for the CNN
        activation = 'relu',
        ),

        keras.layers.Flatten(),
        keras.layers.Dense(
            units = hp.Int('dense_1_units', min_value = 32, max_value = 128, step = 16),
            activation = 'relu'
        ),

        keras.layers.Dense(
        10, activation = 'softmax') #ooutput layer with 10 output nodes


    ])

    model.compile(optimizer = keras.optimizers.Adam(hp.Choice('learning_rate', values = [1e-2,1e-3])),
                 loss = 'sparse_categorical_crossentropy',
                 metrics = ['accuracy']) #metrics we have to focus on

    return model

!pip install -q -U keras-tuner

from keras_tuner import RandomSearch
from keras_tuner.engine.hyperparameters import HyperParameters

# now it helps us find what parameters we have to use
tuner_search = RandomSearch(
build_model,
objective = 'val_accuracy',
max_trials = 5,
directory = 'Output',
project_name = 'Mnist_Fashion')

tuner_search.search(train_images,train_labels, epochs = 3, validation_split = 0.1)

model = tuner_search.get_best_models(num_models=1)[0]

model.summary()

model.fit(train_images, train_labels, validation_split = 0.1, epochs = 10, initial_epoch = 3)

